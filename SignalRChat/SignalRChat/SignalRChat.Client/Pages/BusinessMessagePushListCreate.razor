@page "/BusinessMessagePushListCreate"
@rendermode InteractiveWebAssembly
@using SignalRChat.Client.Service
@using SignalRChat.Client.Model
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject SignalRChat.Client.Service.BusinessMessagePushService ObjectBusinessMessagePushService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>廣告/行銷活動新增</PageTitle>
@if (create)
{
    <h3>廣告/行銷活動新增</h3>
    <EditForm Model="@backendUserListCreateModel" enctype="multipart/form-data" Enhance FormName="file-form" OnValidSubmit="@AddBusinessMessagePushListAsync">
        <DataAnnotationsValidator @ref="dataAnnotationsValidator" />
        <ValidationSummary />
        <label for="business_id">商家id</label>
        <input id="business_id"
        type="number"
        class="form-control"
        @bind="backendUserListCreateModel.business_id" />
        <label for="message_title">訊息標題</label>
        <input id="message_title"
        type="text"
        class="form-control"
        @bind="backendUserListCreateModel.message_title" />
        <label for="message_content">訊息內容</label>
        <textarea id="message_content" rows="4" cols="20"
        class="form-control"
        @bind="backendUserListCreateModel.message_content" />
        <label for="phone">活動網址</label>
        <input id="message_url"
        type="text"
        class="form-control"
        @bind="backendUserListCreateModel.message_url" />
        <label for="push_start_date">活動啟始日</label>
        <input id="push_start_date"
        type="datetime-local"
        class="form-control"
        @bind="backendUserListCreateModel.push_start_date" />
        <label for="push_end_date">活動啟始日</label>
        <input id="push_end_date"
        type="datetime-local"
        class="form-control"
        @bind="backendUserListCreateModel.push_end_date" />
        <label for="message_image_file">活動圖檔</label>
        <InputFile name="backendUserListCreateModel.message_image_file" class="form-control" OnChange="OnInputFileChange" />
        <Alert Color="AlertColor.Warning" Class="@isHide" Dismissable="true">@errorMessage </Alert>
        <button class="btn btn-outline-primary" type="submit">
            新增
        </button>
        <button class="btn btn-outline-secondary" type="button"
        @onclick="@CancelBusinessMessagePushListAsync">
            取消
        </button>
    </EditForm>
}
@code {
    [SupplyParameterFromForm(FormName = "file-form")]
    private BusinessMessagePushListCreateModel backendUserListCreateModel { get; set;} = new BusinessMessagePushListCreateModel();
    private DataAnnotationsValidator dataAnnotationsValidator = new DataAnnotationsValidator();
    private IBrowserFile IBR ;
    private string errorMessage = "";
    private string isHide = "d-none";
    private List<DataCountryCode>? dataCountryCode;
    private BackendUserRightList BURL;
    // 權限控管
    private bool create = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await InitializeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"錯誤: {ex.Message}");
            }
        }
    }
    private async Task InitializeAsync()
    {
        BURL = await sessionStorage.GetItemAsync<BackendUserRightList>("backendUserRightList");
        if (BURL.dataRight.Where(e => e.backend_right_id == 26).Count() > 0)
        {
            create = true;
        }
        else
        {
            create = false;
        }
        backendUserListCreateModel.business_id = 0;
        backendUserListCreateModel.message_title = "";
        backendUserListCreateModel.message_content = "";
        backendUserListCreateModel.message_url = "";
        backendUserListCreateModel.push_start_date = DateTime.Now;
        backendUserListCreateModel.push_end_date = DateTime.Now;
        isHide = "d-none";
        StateHasChanged();
    }
    private string GetContryCode(DataCountryCode CC)
    {
        return string.Format("{0}({1})", CC.country_id, CC.phone_country);
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        backendUserListCreateModel.message_image_file = e.GetMultipleFiles();     
        // Console.WriteLine(backendUserListCreateModel.message_image_file[0].Name);
    }

    private async void AddBusinessMessagePushListAsync()
    {
        backendUserListCreateModel.backend_user_id = BURL.backend_user_id;
        ResponseStanderd req = await ObjectBusinessMessagePushService.PostBusinessMessagePushList(backendUserListCreateModel);
        errorMessage = req.message;
        isHide = "";
        StateHasChanged();
        await Task.Delay(6000);
        isHide = "d-none";
        StateHasChanged();
    }

    private async void CancelBusinessMessagePushListAsync()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
