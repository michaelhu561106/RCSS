@page "/BackendUserListCreate"
@rendermode InteractiveWebAssembly
@using SignalRChat.Client.Service
@using SignalRChat.Client.Model
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject SignalRChat.Client.Service.BusinessService ObjectBusinessService
@inject SignalRChat.Client.Service.BackendUserService ObjectBackendUserService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>後台用戶新增</PageTitle>
@if(create) {
    <h3>後台用戶新增</h3>
    <EditForm Model="@backendUserListCreateModel" OnValidSubmit="@AddBackendUserListAsync">
        <DataAnnotationsValidator @ref="dataAnnotationsValidator" />
        <ValidationSummary />
        <label for="business_id">商家id</label>
        <input id="business_id"
        type="number"
        class="form-control"
        @bind="backendUserListCreateModel.business_id" />
        <label for="backend_user_name">用戶名稱</label>
        <input id="backend_user_name"
        type="text"
        class="form-control"
        @bind="backendUserListCreateModel.backend_user_name" />
        <label for="email">email</label>
        <input id="email"
        type="email"
        class="form-control"
        @bind="backendUserListCreateModel.email" />
        <label for="phone_country">電話國碼</label><br/>
        <select @bind="backendUserListCreateModel.phone_country">
            @if (dataCountryCode != null)
            {
                @foreach (var dBT in dataCountryCode)
                {
                    <option value="@GetContryCode(dBT)">@GetContryCode(dBT)</option>
                }
            }
        </select><br />
        <label for="phone">電話(第1個0不用輸入)</label>
        <input id="phone"
        type="text"
        class="form-control"
        @bind="backendUserListCreateModel.phone" />
        <label for="password">密碼</label>
        <input id="password"
        type="password"
        class="form-control"
        @bind="backendUserListCreateModel.password" />
        <label for="passwordAgain">再次輸入密碼</label>
        <input id="passwordAgain"
        type="password"
        class="form-control"
        @bind="backendUserListCreateModel.passwordAgain" />
        <Alert Color="AlertColor.Warning" Class="@isHide" Dismissable="true">@errorMessage </Alert>
        <button class="btn btn-outline-primary"type="submit">
            新增
        </button>
        <button class="btn btn-outline-secondary" type="button"
        @onclick="@CancelBackendUserListAsync">
            取消
        </button>
    </EditForm>
}
@code {
    private BackendUserListCreateModel backendUserListCreateModel = new BackendUserListCreateModel();
    private DataAnnotationsValidator dataAnnotationsValidator = new DataAnnotationsValidator();
    private string errorMessage = "";
    private string isHide = "d-none";
    private List<DataCountryCode>? dataCountryCode;
    private BackendUserRightList BURL;
    // 權限控管
    private bool create = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await InitializeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"錯誤: {ex.Message}");
            }
        }
    }
    private async Task InitializeAsync()
    {
        BURL = await sessionStorage.GetItemAsync<BackendUserRightList>("backendUserRightList");
        if (BURL.dataRight.Where(e => e.backend_right_id == 17).Count() > 0)
        {
            create = true;
        }
        else
        {
            create = false;
        }
        dataCountryCode = await ObjectBusinessService.GetCountryCode();
        backendUserListCreateModel.backend_user_name = "";
        backendUserListCreateModel.password = "";
        backendUserListCreateModel.business_id = 0;
        backendUserListCreateModel.email = "";
        backendUserListCreateModel.phone = "";
        backendUserListCreateModel.phone_country = "";
        isHide = "d-none";
        StateHasChanged();
    }
    private string GetContryCode(DataCountryCode CC)
    {
        return string.Format("{0}({1})", CC.country_id, CC.phone_country);
    }

    private async void AddBackendUserListAsync()
    {
        ResponseStanderd req = await ObjectBackendUserService.PostBackendUserList(backendUserListCreateModel.backend_user_name, backendUserListCreateModel.email, backendUserListCreateModel.password, backendUserListCreateModel.business_id, backendUserListCreateModel.phone, string.Format("{0}", backendUserListCreateModel.phone_country.Substring(backendUserListCreateModel.phone_country.IndexOf("(") + 1, backendUserListCreateModel.phone_country.IndexOf(")") - backendUserListCreateModel.phone_country.IndexOf("(") - 1)), backendUserListCreateModel.phone_country.Substring(0, backendUserListCreateModel.phone_country.IndexOf("(")), BURL.backend_user_id);
        errorMessage = req.message;
        isHide = "";
        StateHasChanged();
        await Task.Delay(6000);
        isHide = "d-none";
        StateHasChanged();
    }

    private async void CancelBackendUserListAsync()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
